configfile: "config.yaml"

TRAITS=["BMI","height","HDL","LDL"]

TISSUES=["ADIPOSE_TISSUE","ADRENAL_GLAND","ARTERIAL_BLOOD_VESSEL","BLOOD",
				 "BLOOD_VESSEL","BONE_ELEMENT","BONE_MARROW","BRAIN",
				 "BREAST","COLON","CONNECTIVE_TISSUE","EAR",
				 "EMBRYO","ENDOCRINE_GLAND","EPITHELIUM","ESOPHAGUS",
				 "EXOCRINE_GLAND","EXTRAEMBRYONIC_COMPONENT","EYE","GONAD","GENERIC",
				 "HEART","IMMUNE_ORGAN","INTESTINE","KIDNEY",
				 "LARGE_INTESTINE","LIMB","LIVER","LUNG",
				 "LYMPH_NODE","LYMPHOID_TISSUE","MAMMARY_GLAND","MOUTH",
				 "MUSCULATURE_OF_BODY","NERVE","OVARY","PANCREAS",
				 "PENIS","PLACENTA","PROSTATE_GLAND","SKIN_OF_BODY",
				 "SKIN_OF_PREPUCE_OF_PENIS","SMALL_INTESTINE","SPINAL_CORD","SPLEEN",
				 "STOMACH","TESTIS","THYMUS","THYROID_GLAND",
				 "UTERUS","VAGINA","VASCULATURE"]

CHROMS=[x for x in range(1,23)]

LDSC_PATH  = config["ldsc"]["path"]
LDSC_CONDA = config["ldsc"]["conda"]
LDSC_PYTHON = config["ldsc"]["python"]

REPO_PATH = config["repo"]["path"]


rule all:
	input:
		expand(config["ldsc"]["ldscore_path_TF"] + "customized_baselineLD_cts.RegDB.quantile_normalized.{tissue}.{chrom}.l2.ldscore.gz",tissue=TISSUES,chrom=CHROMS),
		expand(config["ldsc"]["ldscore_path_TL"] + "customized_baselineLD_cts.TLand.quantile_normalized.{tissue}.{chrom}.l2.ldscore.gz",tissue=TISSUES,chrom=CHROMS),
		expand(config["ldsc"]["h2_path"] + "/{trait}/{trait}.{tissue}.results",trait=TRAITS,tissue=TISSUES),
		expand(config["ldsc"]["h2_path"] + "/{trait}/{trait}.{tissue}.tau_star.results",trait=TRAITS,tissue=TISSUES),
		expand(config["ldsc"]["h2_path"] + "/{trait}/{trait}.lead_tissue",trait=TRAITS),
		expand(config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".standard.1.sscore",trait=TRAITS),
		expand(config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".IMPACT.500.1.sscore",trait=TRAITS),
		expand(config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".SURF.500.1.sscore",trait=TRAITS),
		expand(config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".TURF.500.1.sscore",trait=TRAITS),
		expand(config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".standard.bootstrap",trait=TRAITS),
		expand(config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".IMPACT.bootstrap",trait=TRAITS),
		expand(config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".SURF.bootstrap",trait=TRAITS),
		expand(config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".TURF.bootstrap",trait=TRAITS)

rule calculate_LDscores:
	conda: LDSC_CONDA
	input:
		script = LDSC_PATH,
		python = LDSC_PYTHON,
		annot_TF  = config["ldsc"]["baselineLD_TF"] + "customized_baselineLD_cts.RegDB.quantile_normalized.{tissue}.{chrom}.annot.gz",
		annot_TL  = config["ldsc"]["baselineLD_TL"] + "customized_baselineLD_cts.TLand.quantile_normalized.{tissue}.{chrom}.annot.gz",
		hm3    = config["ldsc"]["HM3"] + "hm.{chrom}.snp"
	output:
		config["ldsc"]["ldscore_path_TF"] + "customized_baselineLD_cts.RegDB.quantile_normalized.{tissue}.{chrom}.l2.ldscore.gz",
		config["ldsc"]["ldscore_path_TL"] + "customized_baselineLD_cts.TLand.quantile_normalized.{tissue}.{chrom}.l2.ldscore.gz"
	params:
		bfile_TF = config["ldsc"]["1KG"] + "1000G.EUR.QC.RegDB",
		bfile_TL = config["ldsc"]["1KG"] + "1000G.EUR.QC.TLand",
		ld_wind_cm = 1,
		out_TF = config["ldsc"]["ldscore_path_TF"] + "customized_baselineLD_cts.RegDB.quantile_normalized",
		out_TL = config["ldsc"]["ldscore_path_TL"] + "customized_baselineLD_cts.TLand.quantile_normalized"
	shell:
		"{input.python} {input.script}"
		" --l2"
		" --bfile  {params.bfile_TF}.{wildcards.chrom}"
		" --ld-wind-cm {params.ld_wind_cm}"
		" --out {params.out_TF}.{wildcards.tissue}.{wildcards.chrom}"
		" --annot {input.annot_TF}"
		" --print-snps {input.hm3} &&"
		" {input.python} {input.script}"
		" --l2"
		" --bfile  {params.bfile_TL}.{wildcards.chrom}"
		" --ld-wind-cm {params.ld_wind_cm}"
		" --out {params.out_TL}.{wildcards.tissue}.{wildcards.chrom}"
		" --annot {input.annot_TL}"
		" --print-snps {input.hm3}"

rule calculate_h2:
	conda: LDSC_CONDA
	input:
		expand(config["ldsc"]["ldscore_path_TF"] + "customized_baselineLD_cts.RegDB.quantile_normalized.{{tissue}}.{chrom}.l2.ldscore.gz",chrom=CHROMS),
		expand(config["ldsc"]["ldscore_path_TL"] + "customized_baselineLD_cts.TLand.quantile_normalized.{{tissue}}.{chrom}.l2.ldscore.gz",chrom=CHROMS),
		script = LDSC_PATH,
		python = LDSC_PYTHON,
		sumstats = config["ldsc"]["GWAS"] + "{trait}/LDSC/{trait}.sumstats.gz"
	output:
		config["ldsc"]["h2_path"] + "/{trait}/{trait}.{tissue}.TURF.results",
		config["ldsc"]["h2_path"] + "/{trait}/{trait}.{tissue}.TLAND.results"
	params:
		out = config["ldsc"]["h2_path"],
		ref_ld_chr_TF = config["ldsc"]["ldscore_path_TF"] + "customized_baselineLD_cts.RegDB.quantile_normalized",
		ref_ld_chr_TL = config["ldsc"]["ldscore_path_TL"] + "customized_baselindLD_cts.TLand.quantile_normalized",
		weights = config["ldsc"]["weights"],
		freq = config["ldsc"]["freq"]
	shell:
		"{input.python} {input.script}"
		" --h2 {input.sumstats}"
		" --ref-ld-chr {params.ref_ld_chr_TF}.{wildcards.tissue}."
		" --w-ld-chr {params.weights}"
		" --overlap-annot"
		" --frqfile-chr {params.freq}"
		" --out {params.out}/{wildcards.trait}/{wildcards.trait}.{wildcards.tissue}.TURF"
		" --print-coefficients --print-delete-vals &&"
		" {input.python} {input.script}"
		" --h2 {input.sumstats}"
		" --ref-ld-chr {params.ref_ld_chr_TL}.{wildcards.tissue}."
		" --w-ld-chr {params.weights}"
		" --overlap-annot"
		" --frqfile-chr {params.freq}"
		" --out {params.out}/{wildcards.trait}/{wildcards.trait}.{wildcards.tissue}.TLAND"
		" --print-coefficients --print-delete-vals"

rule calculate_tau_star:
	input:
		expand(config["ldsc"]["h2_path"] + "/{trait}/{trait}.{tissue}.TURF.results",trait=TRAITS,tissue=TISSUES),
		expand(config["ldsc"]["h2_path"] + "/{trait}/{trait}.{tissue}.TLAND.results",trait=TRAITS,tissue=TISSUES),
		script = REPO_PATH + "single-tissue-model/calculate_tau_star.py"
	output:
		config["ldsc"]["h2_path"] + "/{trait}/{trait}.{tissue}.tau_star.TURF.results",
		config["ldsc"]["h2_path"] + "/{trait}/{trait}.{tissue}.tau_star.TLAND.results"
	params:
		results_path = config["ldsc"]["h2_path"],
		sd_path_TF = config["repo"]["path"] + "data/RegDB.tissue.sd",
		sd_path_TL = config["repo"]["path"] + "data/TLand.tissue.sd"
	shell:
		"python3 {input.script}"
		" --trait {wildcards.trait}"
		" --tissue {wildcards.tissue}"
		" --path {params.results_path}"
		" --sd {params.sd_path_TF}"
		" --model TURF &&"
		" python3 {input.script}"
		" --trait {wildcards.trait}"
		" --tissue {wildcards.tissue}"
		" --path {params.results_path}"
		" --sd {params.sd_path_TL}"
		" --model TLAND"

rule select_lead_tissue:
	input:
		results_TF = expand(config["ldsc"]["h2_path"] +"/{{trait}}/{{trait}}.{tissue}.tau_star.TURF.results",tissue=TISSUES),
		results_TL = expand(config["ldsc"]["h2_path"] + "/{{trait}}/{{trait}}.{tissue}.tau_star.TLAND.results",tissue=TISSUES),
		script = REPO_PATH + "single-tissue-model/select_lead_tissue.py"
	output:
		config["ldsc"]["h2_path"] + "/{trait}/{trait}.TURF.lead_tissue",
		config["ldsc"]["h2_path"] + "/{trait}/{trait}.TLAND.lead_tissue"
	params:
		results_path = config["ldsc"]["h2_path"]
	shell:
		"python3 {input.script}"
		" --trait {wildcards.trait}"
		" --path {params.results_path}"
		" --model TURF &&"
		" python3 {input.script}"
		" --trait {wildcards.trait}"
		" --path {params.results_path}"
		" --model TLAND"

rule run_PLINK_scores:
	input:
		tissue_TF = config["ldsc"]["h2_path"] + "/{trait}/{trait}.TURF.lead_tissue",
		tissue_TL = config["ldsc"]["h2_path"] + "/{trait}/{trait}.TLAND.lead_tissue",
		script = REPO_PATH + "single-tissue-model/run_PLINK_scores.sh"
	output:
		config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".standard.1.sscore",
		config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".IMPACT.500.1.sscore",
		config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".SURF.500.1.sscore",
		config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".TURF.500.1.sscore",
		config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".TLAND.500.1.sscore"
	params:
		root_path = config["plink"]["root_path"],
		results_path = config["plink"]["results_path"],
		ancestry = config["plink"]["ancestry"],
		plink = config["plink"]["plink_path"],
		plink2 = config["plink"]["plink2_path"]
	shell:
		"TISSUE_TF=`< {input.tissue_TF}`; TISSUE_TL=`< {input.tissue_TL}`; bash {input.script} {params.root_path} {params.results_path}/{wildcards.trait} {params.ancestry} {wildcards.trait} $TISSUE_TF $TISSUE_TL {params.plink} {params.plink2}"

rule bootstrap_PLINK_scores:
	input: 
		config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".standard.1.sscore",
		config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".IMPACT.500.1.sscore",
		config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".SURF.500.1.sscore",
		config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".TURF.500.1.sscore",
		config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".TLAND.500.1.sscore"
		script = REPO_PATH + "single-tissue-model/bootstrap_PLINK_scores.py"
	output:
		config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".standard.bootstrap",
		config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".IMPACT.bootstrap",
		config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".SURF.bootstrap",
		config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".TURF.bootstrap",
		config["plink"]["results_path"] + "/{trait}/{trait}." + config["plink"]["ancestry"] + ".TLAND.bootstrap"
	params:
		ancestry = config["bootstrap"]["ancestry"],
		isquant = config["bootstrap"]["isQuant"],
		root_path = config["bootstrap"]["root_path"]
	shell:
		"python3 {input.script}"
		" --ancestry {params.ancestry}"
		" --trait {wildcards.trait}"
		" --isQuant {params.isquant}"
		" --root {params.root_path}"
		" --model TURF &&"
		" python3 {input.script}"
		" --ancestry {params.ancestry}"
		" --trait {wildcards.trait}"
		" --isQuant {params.isquant}"
		" --root {params.root_path}"
		" --model TLAND"